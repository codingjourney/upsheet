#!/usr/bin/python
import base64
import getpass
import json
import pycurl
import re
import StringIO
import sys

# Parses a timesheet file and creates work log entries in a JIRA instance.
# The expected format of the timesheet file is:
#
# YYYYmmdd
#   HHMM-HHMM issueID: comment
#   HHMM-HHMM issueID: comment
#   ...
#
# where YYYY=year, mm=month, dd=day, HH=hour, MM=minute,
#       issueID = JIRA issue ID, comment = single-line work log comment

# Configuration
URL  = "http://localhost:8080/rest/api/latest/issue/%s/worklog"
USER = "admin"
PASS = "" # if empty, user will be prompted for password
TYPE = "Content-Type: application/json"
AUTH = "Authorization: Basic %s"
TIME = "%s-%s-%sT%s:%s:00.000+0200"

# Work log cache for collision detection
# format: {issueID:[(startTime,endTime),...],...} with YYmmddHHMM timestamps
knownWorkLogs = {}

def timestamp(date, time):
  year   = date[:4]
  month  = date[4:6]
  day    = date[6:]
  hour   = time[:2]
  minute = time[2:]
  return TIME % (year, month, day, hour, minute)

def untimestamp(ts):
  date = ts[0:4] + ts[5:7] + ts[8:10]
  time = ts[11:13] + ts[14:16]
  return date, time

def duration(startTime, endTime):
  startH = int(startTime[:2])
  startM = int(startTime[2:])
  endH   = int(endTime[:2])
  endM   = int(endTime[2:])
  if endH < startH: endH += 24
  start = 60 * startH + startM
  end   = 60 * endH + endM
  return end - start

def collides(issueID, date, startTime, endTime):
  startHour = int(startTime[:2])
  endHour   = int(endTime[:2])
  if endHour < startHour:
    endTime = str(endHour + 24) + endTime[2:]
  interval = date + startTime, date + endTime
  for entry in getWorkLog(issueID):
    if entry[0] < interval[1] and entry[1] > interval[0]:
      return True
  return False

def getWorkLog(issueID):
  if issueID in knownWorkLogs:
    workLog = knownWorkLogs[issueID]
  else:
    workLog = downloadWorkLog(issueID)
    knownWorkLogs[issueID] = workLog
  return workLog

def downloadWorkLog(issueID):
  url  = URL  % issueID
  auth = AUTH % credentials
  buff = StringIO.StringIO()
  c = pycurl.Curl()
  c.setopt(c.URL, url)
  c.setopt(c.HTTPHEADER, [TYPE, auth])
  c.setopt(c.WRITEFUNCTION, buff.write)
  c.perform()
  c.close()
  fullLog = json.loads(buff.getvalue())
  workLog = []
  for entry in fullLog["worklogs"]:
    if entry["author"]["name"] == USER:
      date, startTime = untimestamp(entry["started"])
      duration = entry["timeSpentSeconds"] / 60
      workLog.append(createWorkLogEntry(date, startTime, duration))
  return workLog

def createWorkLogEntry(date, startTime, duration):
  startH = int(startTime[:2])
  startM = int(startTime[2:])
  endTimeRaw = startH * 60 + startM + duration
  endH = str(endTimeRaw / 60).rjust(2, "0")
  endM = str(endTimeRaw % 60).rjust(2, "0")
  return (date + startTime, date + endH + endM)

def upload(credentials, date, start, end, issueID, comment):
  when = timestamp(date, start)
  mins = duration(start, end)
  url  = URL  % issueID
  auth = AUTH % credentials
  body = {"comment" : comment, "started" : when, "timeSpent" : str(mins) + "m"}
  c = pycurl.Curl()
  c.setopt(c.URL, url)
  c.setopt(c.HTTPHEADER, [TYPE, auth])
  c.setopt(c.POSTFIELDS, json.dumps(body))
  c.setopt(c.WRITEFUNCTION, lambda ignored: None)
  c.perform()
  c.close()
  getWorkLog(issueID).append(createWorkLogEntry(date, start, mins))

def process(path, credentials):
  f = open(path)
  dateLine = re.compile("^\d{8}")
  timeLine = re.compile("^  (\d{4})-(\d{4}) ([A-Z]+-[0-9]+): (.+)$")
  date = ""
  for lineWithNewline in f:
    line = lineWithNewline[:-1]
    if dateLine.match(line):
      date = line
    else:
      match = timeLine.match(line)
      if match != None:
        startTime = match.group(1)
        endTime   = match.group(2)
        issueID   = match.group(3)
        comment   = match.group(4)
        if collides(issueID, date, startTime, endTime):
          print("Collision: " + date + line)
        else:
          upload(credentials, date, startTime, endTime, issueID, comment)
          print(" Uploaded: " + date + line)
      elif len(line) > 0:
        print("  Skipped: " + line)

if len(sys.argv) >= 2:
  password = PASS
  if len(password) == 0:
    password = getpass.getpass("Password: ")
  credentials = base64.b64encode("%s:%s" % (USER, password))
  process(sys.argv[1], credentials)
else:
  print("USAGE: %s /path/to/timesheet" % sys.argv[0])
