#!/usr/bin/python
from datetime import *
import base64
import getpass
import json
import pycurl
import re
import StringIO
import sys
import time as t

# Parses a timesheet file and creates work log entries in a JIRA instance.
# The expected format of the timesheet file is:
#
# YYYYmmdd
#   HHMM-HHMM issueID: comment
#   HHMM-HHMM issueID: comment
#   ...
#
# where YYYY = year, mm = month, dd = day, HH = hour, MM = minute,
#       issueID = JIRA issue ID, comment = single-line work log comment

# Configuration
URL  = "http://localhost:8080/rest/api/latest/issue/%s%s"
USER = "admin"
PASS = "" # if empty, user will be prompted for password
TYPE = "Content-Type: application/json"
AUTH = "Authorization: Basic %s"

# format strings for strptime() and strftime()
TSTAMP_SERVER_IN  = "%Y-%m-%dT%H:%M"
TSTAMP_SERVER_OUT = "%Y-%m-%dT%H:%M:00.000%z"
TSTAMP_LOCAL      = "%Y%m%d%H%M"

# Line format patterns
DATE_LINE = re.compile("^\d{8}$")
TIME_LINE = re.compile("^  (\d{4})-(\d{4}) ([A-Z]+-[0-9]+): +(\S.+)$")

# Exception class for carrying HTTP details up the stack
class ResponseException:
  def __init__(self, url, dataSent, httpStatus, message, response):
    self.url = url; self.dataSent = dataSent; self.httpStatus = httpStatus
    self.message = message; self.response = response
  def __str__(self):
    return "\nError accessing %s\nData sent: %s\n%s\n\n%s"\
           % (self.url, str(self.dataSent), self.message, self.response)

class Timezone(tzinfo):
  def __init__(self, offset):
    self.offset = offset
  def __str__(self):
    return str(self.offset)
  def utcoffset(self, dt):
    return self.offset
  def tzname(self, dt):
    return None
  def dst(self, dt):
    return timedelta(seconds = 0)

class Interval:
  def minutes(self):
    return int((self.end - self.start).total_seconds() / 60)
  def overlapsWith(self, other):
    return self.end > other.start and self.start < other.end

class LocalInterval(Interval):
  def __init__(self, date, startTime, endTime):
    self.start = self.moment(date, startTime)
    self.end   = self.moment(date, endTime)
    if self.start > self.end: self.end += timedelta(days = 1)
  def moment(self, date, time):
    moment = datetime.strptime(date + time, TSTAMP_LOCAL)
    moment = moment.replace(tzinfo = Timezone(self.offset(moment)))
    return moment
  def offset(self, moment):
    localMoment = t.localtime(t.mktime(moment.timetuple()))
    isDST = t.daylight != 0 and localMoment.tm_isdst == 1
    return timedelta(seconds = -t.altzone if isDST else -t.timezone)

class ServerInterval(Interval):
  def __init__(self, startStr, duration):
    self.start = self.moment(startStr)
    self.end   = self.start + timedelta(seconds = duration)
  def moment(self, isoString):
    moment = datetime.strptime(isoString[:16], TSTAMP_SERVER_IN)
    moment = moment.replace(tzinfo = Timezone(self.offset(isoString[23:])))
    return moment
  def offset(self, offsetString):
    sign = offsetString[0:1]
    hrs  = int(sign + offsetString[1:3])
    mins = int(sign + offsetString[3:5])
    return timedelta(hours = hrs, minutes = mins)

def askServer(issueID, pathOrQuery, body):
  url  = URL  % (issueID, pathOrQuery)
  auth = AUTH % credentials
  head = StringIO.StringIO()
  buff = StringIO.StringIO()
  c = pycurl.Curl()
  try:
    c.setopt(c.URL, url)
    c.setopt(c.HTTPHEADER, [TYPE, auth])
    if body != None:
      c.setopt(c.POSTFIELDS, json.dumps(body))
    c.setopt(c.WRITEFUNCTION, buff.write)
    c.setopt(c.HEADERFUNCTION, head.write)
    c.perform()
    httpStatus = c.getinfo(c.HTTP_CODE)
    response, message = parseResponse(httpStatus, head, buff)
    if message != None:
      raise ResponseException(url, body, httpStatus, message, response)
    else:
      return response
  finally:
    c.close()

def parseResponse(httpStatus, head, buff):
  message = None
  response = None
  if httpStatus not in (200, 201):
    message = "HTTP response not OK"
    response = head.getvalue()
  else:
    try:
      response = json.loads(buff.getvalue())
    except:
      message = "Failed to parse response"
      response = buff.getvalue()
    if type(response) is dict and "errors" in response:
      message = "Response claims errors"
      response = response["errors"]
  return response, message

def status(issueID):
  response = askServer(issueID, "?fields=status", None)
  return response["fields"]["status"]["name"]

def workLog(issueID):
  if issueID in knownWorkLogs:
    workLog = knownWorkLogs[issueID]
  else:
    workLog = downloadWorkLog(issueID)
    knownWorkLogs[issueID] = workLog
  return workLog

def downloadWorkLog(issueID):
  fullLog = askServer(issueID, "/worklog", None)
  workLog = []
  for entry in fullLog["worklogs"]:
    if entry["author"]["name"] == USER:
      startStr = entry["started"]
      duration = entry["timeSpentSeconds"]
      workLog.append(ServerInterval(startStr, duration))
  return workLog

def collides(issueID, interval):
  for entry in workLog(issueID):
    if entry.start < interval.end and entry.end > interval.start:
      return True
  return False

def upload(issueID, interval, comment):
  minutes = int((interval.end - interval.start).total_seconds() / 60)
  body = {
    "started"   : interval.start.strftime(TSTAMP_SERVER_OUT),
    "timeSpent" : str(minutes) + "m",
    "comment"   : comment
  }
  askServer(issueID, "/worklog", body)
  workLog(issueID).append(interval)

def process(path):
  f = open(path)
  date = ""
  for lineWithNewline in f:
    line = lineWithNewline[:-1]
    if DATE_LINE.match(line):
      date = line
    else:
      match = TIME_LINE.match(line)
      if match:
        startTime = match.group(1)
        endTime   = match.group(2)
        issueID   = match.group(3)
        comment   = match.group(4)
        interval  = LocalInterval(date, startTime, endTime)
        try:
          if collides(issueID, interval):
            print(" Collision: " + date + line)
          else:
            upload(issueID, interval, comment)
            print("  Uploaded: " + date + line)
        except ResponseException as rx:
          if rx.httpStatus == 400 and status(issueID) == "Closed":
            print("Was closed: " + date + line)
          elif rx.httpStatus == 404:
            print("No such ID: " + date + line)
          else:
            raise rx
      elif len(line) > 0:
        print("Bad format: " + line)

if len(sys.argv) >= 2:
  password = PASS
  if len(password) == 0:
    password = getpass.getpass("Password: ")
  credentials = base64.b64encode("%s:%s" % (USER, password))
  knownWorkLogs = {}
  succeeded = process(sys.argv[1])
  sys.exit(0 if succeeded else 1)
else:
  print("USAGE: %s /path/to/timesheet" % sys.argv[0])
  sys.exit(1)
